{"version":3,"sources":["services/AuthService.ts","utilities/RestClient.ts","services/LoginService.ts","presentational/UnprotectedHeader.tsx","pages/Login.tsx","pages/Timeline.tsx","pages/Start.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["history","RestClient","headers","request","url","body","fetchOptions","method","JSON","stringify","Promise","resolve","reject","fetch","then","response","contentType","get","indexOf","json","data","console","log","text","error","post","a","put","del","debug","Debug","AuthService","localStorage","getItem","token","setItem","removeItem","this","getToken","authed","push","h","authService","LoginService","restClient","performLogin","loginObject","result","saveToken","UnprotectedHeader","appName","className","to","src","alt","loginService","Login","props","state","username","password","event","setState","target","name","value","preventDefault","r","onSubmit","e","handleSubmit","type","onChange","handleChange","placeholder","Component","Timeline","Start","width","class","createBrowserHistory","PrivateRoute","component","rest","render","auth","pathname","from","location","getRoute","isAuthorised","attachHistory","App","path","exact","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.35146808.chunk.js","sourcesContent":["import Debug from 'debug'\nconst debug = Debug('app:AuthService')\n\nlet history\n\nclass AuthService {\n    getToken() {\n        const token = localStorage.getItem('token')\n        return token\n    }\n    \n    saveToken(token){\n        localStorage.setItem('token', `Bearer ${token}`)\n    }\n\n    clearToken() {\n        localStorage.removeItem('token')\n    }\n\n    isAuthorised() {\n        const token = this.getToken()\n        debug('token is', token)\n        const authed = !!token \n        debug('check auth', authed)\n        return authed\n    }\n\n    logout() {\n        localStorage.removeItem('token')\n        history.push('/')\n    }\n\n    attachHistory(h) {\n        history = h \n    }\n\n    redirectToLogin() {\n        history.push('/login')\n    }\n}\n\nexport default AuthService","const RestClient = () => {\n\n    const headers = {\n        'Content-Type': 'application/json'\n    }\n\n    const request = ({ url, body, method }) => {\n\n        const fetchOptions: any = {\n            method,\n            headers\n        }\n        if (body) {\n            fetchOptions.body = JSON.stringify(body)\n        }\n\n        return new Promise((resolve, reject) => {\n            fetch(url, fetchOptions)\n                .then(response => {\n                    const contentType = response.headers.get('content-type')\n                    if (contentType && contentType.indexOf('application/json') !== -1) {\n                        return response.json().then(data => {\n                            console.log('json', data)\n                            resolve(data)\n                        })\n                    } else {\n                        return response.text().then(text => {\n                            console.log('text', text)\n                            reject({ error: text })\n                        })\n                    }\n                })\n        })\n    }\n\n\n    const get = (url) => {\n\n    }\n    const post = async (url, body) => {\n        return request({url, body, method: 'POST'})\n    }\n    const put = (url, body) => {\n\n    }\n    const del = (url) => {\n\n    }\n\n    return { get, post, put, del }\n}\n\nexport default RestClient","import AuthService from './AuthService'\n\nconst authService = new AuthService()\n\nconst LoginService = (restClient) => {\n    const {post} = restClient\n\n    return {\n        async performLogin(loginObject: LoginRequest) {\n            \n            const result = await post('/api/v1/user/login', loginObject)\n            authService.saveToken(result.token)\n            return result\n        }\n    }\n}\n\nexport interface LoginRequest {\n    username?: string,\n    password?: string\n}\n\nexport default LoginService","import React from 'react'\nimport './UnprotectedHeader.css'\nimport {Link} from 'react-router-dom'\n\n\nconst UnprotectedHeader = ({appName}) => (\n    <div className=\"navbar\">\n        <Link to='/'>\n            <img src=\"nounse.png\" className=\"logo\" alt=\"logo\" />\n            <h1>{appName}</h1>\n        </Link>\n    </div>\n)\n\nexport default UnprotectedHeader","import React, { Component } from 'react'\nimport './Login.css'\nimport RestClient from '../utilities/RestClient'\nimport LoginService from '../services/LoginService'\nimport UnprotectedHeader from '../presentational/UnprotectedHeader'\n\nconst loginService = LoginService(RestClient())\n\ninterface LoginState {\n    username?: '',\n    password?: '',\n}\n\nclass Login extends Component<any, LoginState> {\n    \n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            username: '',\n            password: '',\n        }\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        console.log(this.state)\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n        event.preventDefault()\n\n        loginService.performLogin(this.state).then(r => {\n            this.props.history.push('/')\n        })\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <div className=\"page--unprotected\">\n                <UnprotectedHeader appName='Nounse'/>\n                <div className=\"Login\">\n                    <h3>Login</h3>\n                    <form onSubmit={e => this.handleSubmit(e)}>\n                        <input type=\"text\"\n                            value={this.state.username}\n                            onChange={e => this.handleChange(e)}\n                            placeholder=\"Username \\ Email\"\n                            name=\"username\"></input>\n                        <input type=\"text\"\n                            value={this.state.password}\n                            onChange={e => this.handleChange(e)}\n                            placeholder=\"Password\"\n                            name=\"password\">\n                        </input>\n                        <input type=\"submit\" value=\"Login\"></input>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React, {Component} from 'react'\nimport UnprotectedHeader from '../presentational/UnprotectedHeader'\n\nclass Timeline extends Component {\n    // constructor(props: any) {\n    //     super(props)\n    // }\n\n    render() {\n        return (\n            <div className=\"page--unprotected\">\n                <UnprotectedHeader appName='Nounse' />\n                \n                Timeline goes here\n            </div>\n        )\n    }\n}\n\nexport default Timeline","import React, {Component} from 'react'\n\nimport {Link} from 'react-router-dom'\n\nclass Start extends Component {\n    render() {\n        return (\n            <div>\n                <img alt=\"Nounse\" src=\"nounse.png\" width=\"400px\" />\n                <h1 className=\"title\">\n                    Nounse\n                </h1>\n        \n            \n                <h2 className=\"subtitle\">\n                    Microblogging redefined\n                </h2>\n        \n                <Link class=\"button--green\" to=\"/login\">Login</Link>\n                <Link class=\"button--grey\" to=\"/register\">Register</Link>\n        \n            \n          </div>\n        )\n    }\n}\n\nexport default Start","import React, { Component } from 'react';\nimport './App.css';\n\nimport Login from './pages/Login'\nimport Timeline from './pages/Timeline'\nimport Start from './pages/Start'\n\nimport { Router, Route, Redirect } from 'react-router-dom'\n\nimport { createBrowserHistory } from 'history'\n\n\nimport AuthService from './services/AuthService'\n\nconst history = createBrowserHistory()\nconst authService = new AuthService()\nauthService.attachHistory(history)\n\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  function getRoute(auth, props) {\n      if (auth) {\n          return (\n              <Component {...props} />\n          )\n      } else {\n          return (<Redirect\n              to={{\n                  pathname: '/login',\n                  state: { from: props.location }\n              }}\n          />)\n      }\n  }\n\n  return (\n      <Route\n          {...rest}\n          render={props => getRoute(authService.isAuthorised(), props)}\n      />\n  )\n}\n\nclass App extends Component {\n  render() {\n      return (\n          <Router history={history}>\n              <div className=\"App\">\n                  <PrivateRoute path=\"/\" exact component={Timeline}/>\n                  {/* <PrivateRoute path=\"/start\" exact component={Start} /> */}\n                  <Route path=\"/login\" component={Login}></Route>\n                  <Route path=\"/start\" component={Start}></Route>\n              </div>\n          </Router>\n      )\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}